<template lang="cml">
	<view class="m-calendar">
		<row class="calendar-hd" justify="space-between">
			<row class="calendar-hd_infos" justify="start" align="bottom">
				<text class="calendar-hd_info--month">{{month + 1}}月</text>
				<text class="calendar-hd_info--year">{{year}}年</text>
			</row>
			<row class="calendar-hd_actions" justify="end">
				<button class="calendar-hd_btn" size="small" type="blue" text="上"
					btn-style="width: 40cpx;padding: 0;margin-right: 10cpx;"
					c-bind:onclick="prevMonth"></button>
				<button class="calendar-hd_btn" size="small" type="blue" text="下"
					btn-style="width: 40cpx;padding: 0;margin-right: 10cpx;"
					c-bind:onclick="nextMonth"></button>
			</row>
		</row>
		<row class="calendar-tit">
			<col class="calendar-col" c-for="{{weekTitle}}">
				<text class="calendar-tit_name text-center">{{item}}</text>
			</col>
		</row>
		<view class="calendar-content">
			<row class="calendar-date_row" c-for="{{dateList}}" c-for-item="weeks">
				<col c-for="{{weeks}}" class="calendar-col calendar-date_item--fix">
					<view class="calendar-date_item {{item.type === 2 ? 'calendar-date_item--month' : ''}} {{(item.type === 2 && item.date === day ) ? 'calendar-date_item--curt' : ''}}"
						c-bind:click="selectDate(item)">
						<text class="text-center">{{item.date}}</text>
					</view>
				</col>
			</row>
		</view>
	</view>
</template>

<script>
class Calendar {
  data = {
		weekTitle: [ '日', '一', '二', '三', '四', '五', '六' ],
		year: 0,
		month: 0,
		day: 0,
  }

  computed = {
  	dateList() {
  		const {
        year,
        month,
    	} = this;
    	const days = this.getDaysByYM(year, month);
      const prevDays = this.getDaysByYM(year, month - 1);
      const {
        week,
      } = this.getDateInfo(year, month, 1);
      let dateList = this.fillDates(1, days);
      let prevList;
      let nextList;

      // 上月日期补充
      if (week === 0) { // 周日
        prevList = [];
      } else {
        prevList = this.fillDates((prevDays + 1) - week, prevDays, 1);
      }
      dateList = prevList.concat(dateList);
      // 下月日期补充
      const nextLen = dateList.length % 7;
      if (nextLen) {
        nextList = this.fillDates(1, 7 - nextLen, 3);
      } else {
        nextList = [];
      }
      dateList = dateList.concat(nextList);
      return this.formatDateList(dateList);
  	}
  }

  watch  = {
  }

  methods = {
  	// 获取某年某月的天数
    getDaysByYM(year, month) {
      const date = new Date(year, month + 1, 0);
      return date.getDate();
    },

    // 获取日期详细信息
    getDateInfo(year, month, day) {
      const date = new Date(year, month, day);
      return {
        year: date.getFullYear(),
        month: date.getMonth(),
        day: date.getDate(),
        week: date.getDay(),
        timestamp: date.getTime(),
      };
    },

    /**
     * 填充日期
     * @param type 1 上月 2 当月 3 下月
     */
    fillDates(start, end, type) {
      const dates = [];
      for(let i = start; i <= end; i++) { // eslint-disable-line
        dates.push({
          date: i,
          type: type || 2,
        });
      }
      return dates;
    },

    // 日期数据拆分
    formatDateList(list) {
    	const result = [];
    	for (let i = 0, len = list.length / 7; i < len; i++) {
    		let start = i * 7;
    		result[i] = list.slice(start, start + 7);
    	}
    	return result;
    },
		
		/**
		 * ----------------------------------------------------------------------------------------------------
		 * 事件处理
		 * ----------------------------------------------------------------------------------------------------
		 */
		prevMonth() {
			const { month } = this;
			if (month > 0) {
				this.month -= 1;
				return;
			}
			this.year -= 1;
			this.month = 11;
		},
		nextMonth() {
			const { month } = this;
			if (month < 11) {
				this.month += 1;
				return;
			}
			this.year += 1;
			this.month = 0;
		},
		selectDate(data) {
			this.day = data.date;
			switch(data.type) {
				case 1:
					this.prevMonth();
					break;
				case 3:
					this.nextMonth();
					break;
				default:
					break;
			}
		},
  }

  beforeCreate() {
  }

  created() {
  	// 初始化当前时间
  	const now = new Date();
  	this.year = now.getFullYear();
  	this.month = now.getMonth();
  	this.day = now.getDate();
  }

  beforeMount() {
  }

  mounted() {
  }

  beforeDestroy() {
  }

  destroyed() {
  }
}

export default new Calendar();
</script>

<style type="less">
	/*
	 * 公共样式
	 */
	.m-calendar {
		width: 750cpx;
	}
	.calendar-col {
		flex: 1;
		width: 106cpx;
		align-items: center;
	}
	.text-center {
		align-self: center;
	}

	/*
	 * 头部样式
	 */
	.calendar-hd {
		padding: 10cpx 40cpx;
	}
	.calendar-hd_info--month {
		margin-right: 10cpx;
		font-size: 50cpx;
	}
	.calendar-tit {
		color: #fff;
		background-color: #000;
	}
	.calendar-tit_name {
		line-height: 60cpx;
		font-size: 24cpx;
		text-align: center;
	}
	
	/*
	 * 日期样式
	 */
	.calendar-date_row {
		margin-top: 24cpx;
	}
	.calendar-date_item {
		width: 80cpx;
		height: 80cpx;
		border-radius: 50%;
		align-items: center;
		justify-content: center;
		color: #ccc;
	}
	.calendar-date_item--month {
		color: #000;
	}
	.calendar-date_item--today {
		color: #3986ca;
	}
	.calendar-date_item--curt {
		background-color: pink;
	}
</style>

<script cml-type="json">
{
  "base": {
    "usingComponents": {
		}
  }
}
</script>
